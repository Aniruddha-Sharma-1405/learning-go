// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Provided access to User CRUD operations",
    "title": "Users API",
    "version": "0.0.1"
  },
  "host": "learning.go.com",
  "basePath": "/v1",
  "paths": {
    "/user": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create a User",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created Successfully",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/user/{userId}": {
      "get": {
        "description": "Returns a user object that is stored based on the id passed in the API call",
        "produces": [
          "application/json"
        ],
        "summary": "Returns a user based on the id",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User returned",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "summary": "Delete a User",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted User",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "description": "Endpoint for clients to fetch all the available users from the service",
        "produces": [
          "application/json"
        ],
        "summary": "Returns a list of users.",
        "responses": {
          "200": {
            "description": "A JSON array of user names",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "email": {
          "description": "User's email address",
          "type": "string",
          "format": "email"
        },
        "id": {
          "description": "Unique identifier for the user",
          "type": "integer",
          "format": "int64"
        },
        "userName": {
          "description": "User's chosen userName",
          "type": "string"
        }
      }
    },
    "UserRequest": {
      "type": "object",
      "properties": {
        "email": {
          "description": "User's email address",
          "type": "string",
          "format": "email"
        },
        "userName": {
          "description": "User's chosen userName",
          "type": "string"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Provided access to User CRUD operations",
    "title": "Users API",
    "version": "0.0.1"
  },
  "host": "learning.go.com",
  "basePath": "/v1",
  "paths": {
    "/user": {
      "post": {
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "summary": "Create a User",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created Successfully",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      }
    },
    "/user/{userId}": {
      "get": {
        "description": "Returns a user object that is stored based on the id passed in the API call",
        "produces": [
          "application/json"
        ],
        "summary": "Returns a user based on the id",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User returned",
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "summary": "Delete a User",
        "parameters": [
          {
            "type": "string",
            "name": "userId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Deleted User",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "description": "Endpoint for clients to fetch all the available users from the service",
        "produces": [
          "application/json"
        ],
        "summary": "Returns a list of users.",
        "responses": {
          "200": {
            "description": "A JSON array of user names",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/User"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "User": {
      "type": "object",
      "properties": {
        "email": {
          "description": "User's email address",
          "type": "string",
          "format": "email"
        },
        "id": {
          "description": "Unique identifier for the user",
          "type": "integer",
          "format": "int64"
        },
        "userName": {
          "description": "User's chosen userName",
          "type": "string"
        }
      }
    },
    "UserRequest": {
      "type": "object",
      "properties": {
        "email": {
          "description": "User's email address",
          "type": "string",
          "format": "email"
        },
        "userName": {
          "description": "User's chosen userName",
          "type": "string"
        }
      }
    }
  }
}`))
}
